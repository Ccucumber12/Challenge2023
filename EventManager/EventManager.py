class EventManager:
    """
    It coordinate communication between the Model, View, and Controller.
    Model, View, and Controller are all listeners, the EventManager will broadcast an event to them by post()
    """
    def __init__(self):
        self.listeners = dict()

    def register_listener(self, event, listener):
        """
        Adds a listener to our spam list.
        It will receive Post()ed events through it's notify(event) call.
        """
        if event not in self.listeners:
            self.listeners[event] = []
        self.listeners[event].append(listener)

    def unregister_listener(self, listener):
        """
        Remove a listener from our spam list.
        This is implemented but hardly used.
        Our weak ref spam list will auto remove any listeners who stop existing.
        """
        pass

    def post(self, event):
        """
        Post a new event to the message queue.
        It will be broadcast to all listeners.
        """
        # # this segment use to debug
        # if not (isinstance(event, Event_EveryTick) or isinstance(event, Event_EverySec)):
        #     print( str(event) )
        if type(event) not in self.listeners:
            return
        for listener in self.listeners[type(event)]:
            listener(event)


class BaseEvent:
    """
    A superclass for any events that might be generated by
    an object and sent to the EventManager.
    """
    name = 'Generic event'

    def __init__(self):
        pass

    def __str__(self):
        # For Debug
        return self.name

